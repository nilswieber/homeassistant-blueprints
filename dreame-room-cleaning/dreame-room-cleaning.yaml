blueprint:
  name: Dreame Room Cleaning
  description: > 
    Tracks the cleaned rooms per day. Allows to start a cleaning based on uncleaned rooms for that day.

    # Start the cleaning

    ```yaml
    vacuum: vacuum.your_vacuum
    prefered_cleaning_mode: sweeping # (optional) Default: sweeping_and_mopping 
    ```
  domain: automation
  input:
    vacuum_entity:
      name: Vacuum
      selector:
        entity:
          filter:
            domain:
            - vacuum
          multiple: false
    todo_list_entity:
      name: ToDo-List
      selector:
        entity:
          filter:
            domain:
            - todo
          multiple: false
    cleaned_area_entity:
      name: Cleaned Area Sensor
      selector:
        entity:
          filter:
            domain:
            - sensor
          multiple: false
    current_room_entity:
      name: Current Room Sensor
      selector:
        entity:
          filter:
            domain:
            - sensor
          multiple: false
variables:
  vacuum_entity: !input vacuum_entity
  todo_list_entity: !input todo_list_entity
  cleaned_area_entity: !input cleaned_area_entity
  current_room_entity: !input current_room_entity
triggers:
  - trigger: time
    at: "00:00:00"
    id: new-day
  - trigger: event
    event_type: start-room-cleaning
    event_data:
      vacuum: !input vacuum_entity
    id: start-room-cleaning
  - trigger: state
    entity_id:
      - !input cleaned_area_entity
    to: null
    id: area-change
conditions: []
actions:
  - action: todo.get_items
    metadata: {}
    target:
      entity_id: "{{ todo_list_entity }}"
    response_variable: items_to_clean
  - if:
      - condition: template
        value_template: "{{ items_to_clean[todo_list_entity]['items'] |count <= 0 }}"
    then:
      - variables:
          map_name: "{{ state_attr(vacuum_entity,'rooms') |first }}"
          vacuum_rooms: "{{ state_attr(vacuum_entity,'rooms')[map_name] }}"
          room_count: "{{ vacuum_rooms |count }}"
      - repeat:
          count: "{{ room_count }}"
          sequence:
            - variables:
                vacuum_room: "{{ vacuum_rooms[repeat.index -1] }}"
                room_definition: "{{\_{\"id\": vacuum_room.id, \"threshold_area\": -1} }}\n"
            - action: todo.add_item
              target:
                entity_id: "{{ todo_list_entity }}"
              data:
                item: "{{ vacuum_room.name }}"
                description: "{{ room_definition |to_json }}"
  - variables:
      vacuum_device_id: "{{ device_attr(vacuum_entity,'id') }}"
      all_room_definitions: >-
        {{ items_to_clean[todo_list_entity]['items']| map(attribute='description') | map('from_json') | list }}
      current_room_id: >-
        {{ state_attr(current_room_entity,'room_id') }}
      cleaning_progress_entity: >
        {{ device_entities(vacuum_device_id) | select('match','sensor\..*_cleaning_progress') |list |first }}
      cleaning_count_entity: >-
        {{ device_entities(vacuum_device_id) | select('match','sesnor\..*_cleaning_count') |list |first }}
      cleaning_progress: "{{ states(cleaning_progress_entity) }}"
      cleaning_count: "{{ states(cleaning_count_entity) }}"
      current_room: "{{ all_room_definitions | selectattr('id','eq',current_room_id) | first }}"
  - repeat:
    count: "{{ all_room_definitions | count }}"
    sequence:
      - variables:
          room_definition: "{{ all_room_definitions[repeat.index - 1] }}"
      - variables:
          room_definition: >-
            {{ room_definition | combine({
              "todo_item": items_to_clean[todo_list_entity]['items'][repeat.index - 1].summary,
              "threshold_area": room_definition.threshold_area | default(-1),
              "is_todo": items_to_clean[todo_list_entity]['items'][repeat.index - 1].status == 'needs_action'
              }) 
            }}
      - data:
          item: "{{ room_definition.todo_item }}"
          description: "{{ room_definition | to_json }}"
        action: todo.update_item
        target:
          entity_id: "{{ todo_list_entity }}"
  - variables:
      all_rooms_to_clean: "{{ all_room_definitions | selectattr('is_todo','eq', true) }}"
  - choose:
      - conditions:
          - condition: trigger
            id:
              - area-change
        sequence:
          - if:
              - condition: template
                value_template: "{{ states(cleaned_area_entity) == 0 }}"
            then:
              - repeat:
                count: "{{ all_rooms_to_clean | count }}"
                sequence:
                  - variables:
                      room_definition: >-
                        {{ all_rooms_to_clean[repeat.index - 1] | combine({
                          "cleaned_area": 0,
                          "last_clean_cycle": cleaning_count + 1
                          }) 
                        }}
                  - action: todo.update_item
                    data:
                      item: "{{ room_definition.todo_item}}"
                      description: "{{ room_definition | to_json }}"
                    target:
                      entity_id: "{{ todo_list_entity }}"
            else:
              - variables:
                  diff_area: "{{ (trigger.to_state.state | float) - (trigger.from_state.state | float) }}"
                  current_room: >
                    {{ current_room | combine({
                        "cleaned_area": current_room.cleaned_area + diff_area,
                        "last_clean": now().isoformat()
                      })
                    }}
                  area_done: "{{ current_room.cleaned_area >= current_room.threshold_area}}"
                  new_item_status: >
                    {% if(area_done) %}
                      completed
                    {% else %}
                      needs_action
                    {% endif %}
              - action: todo.update_item
                data:
                  item: "{{ current_room.todo_item}}"
                  description: "{{ current_room | to_json }}"
                target:
                  entity_id: "{{ todo_list_entity }}"  
      - conditions:
          - condition: trigger
            id:
              - new-day
        sequence:
          - target:
              entity_id: "{{ todo_list_entity }}"
            response_variable: todos
            action: todo.get_items
          - variables:
              items: "{{ todos[todo_list_entity]['items'] }}"
              item_count: "{{ items | list | count }}"
          - repeat:
              count: "{{ item_count }}"
              sequence:
                - target:
                    entity_id: "{{ todo_list_entity }}"
                  data:
                    item: "{{ items[repeat.index - 1].summary }}"
                    status: needs_action
                  action: todo.update_item
      - conditions:
          - condition: trigger
            id:
              - start-room-cleaning
        sequence:
          - action: todo.get_items
            metadata: {}
            data:
              status: needs_action
            target:
              entity_id: "{{ todo_list_entity }}"
            response_variable: items_to_clean
          - variables:
              vacuum_device_id: "{{ device_attr(vacuum_entity,'id') }}"
              clean_genius_entity: >-
                {{ device_entities(vacuum_device_id) |
                select('match','select\..*cleangenius') |list |first }}
              customized_cleaning_entity: >-
                {{ device_entities(vacuum_device_id) |
                select('match','switch\..*customized_cleaning') |list |first }}
              cleaning_times_entities: >-
                {{ device_entities(vacuum_device_id) |
                select('match','select\..*room.*_cleaning_times') |list }}
              cleaning_mode_entities: >-
                {{ device_entities(vacuum_device_id) |
                select('match','select\..*room.*_cleaning_mode') |list }}
              preferred_cleaning_mode: "{{ trigger.event.data.preferred_cleaning_mode |\_default('sweeping_and_mopping') }}"
              room_definitions: >-
                {{ items_to_clean[todo_list_entity]['items']|
                map(attribute='description') | map('from_json') | list }}
              rooms: "{{ room_definitions | map(attribute='id') | map('int') | list }}"
          - action: select.select_option
            metadata: {}
            data:
              option: "off"
            target:
              entity_id: "{{ clean_genius_entity }}"
          - delay:
              hours: 0
              minutes: 0
              seconds: 0
              milliseconds: 500
          - action: switch.turn_on
            metadata: {}
            data: {}
            target:
              entity_id: "{{ customized_cleaning_entity }}"
          - delay:
              hours: 0
              minutes: 0
              seconds: 0
              milliseconds: 500
          - action: select.select_option
            metadata: {}
            data:
              option: 1x
            target:
              entity_id: "{{cleaning_times_entities}}"
          - action: select.select_option
            metadata: {}
            data:
              option: "{{ preferred_cleaning_mode }}"
            target:
              entity_id: "{{ cleaning_mode_entities }}"
          - if:
              - condition: template
                value_template: "{{ (rooms | count) > 0 }}"
            then:
              - action: dreame_vacuum.vacuum_clean_segment
                data:
                  segments: "{{ rooms }}"
                target:
                  entity_id: "{{ vacuum_entity }}"
mode: queued
