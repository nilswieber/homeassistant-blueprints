blueprint:
  name: Dreame Room Cleaning
  description: > 
    Tracks the cleaned rooms per day. Allows to start a cleaning based on uncleaned rooms for that day.

    # Start the cleaning

    To start a cleaning trigger the event: `start-room-cleaning`.

    The event data has to contain `vacuum: vacuum.your_vacuum`.

    You can additionally pass `prefered_cleaning_mode: sweeping # (optional) Default: sweeping_and_mopping`
  domain: automation
  input:
    vacuum_entity:
      name: Vacuum
      selector:
        entity:
          filter:
            domain:
            - vacuum
          multiple: false
    todo_list_entity:
      name: ToDo-List
      description: >
        An (empty) ToDo-List, which will be used to store the state of the rooms and to indicate, which shall be cleaned.
      selector:
        entity:
          filter:
            domain:
            - todo
          multiple: false
    cleaned_area_entity:
      name: Cleaned Area Sensor
      selector:
        entity:
          filter:
            domain:
            - sensor
          multiple: false
    current_room_entity:
      name: Current Room Sensor
      selector:
        entity:
          filter:
            domain:
            - sensor
          multiple: false
    room_overrides:
      name: Room Settings
      default: []
      selector:
        object:
          label_field: id
          description_field: label
          multiple: true
          fields:
            id:
              label: Room ID
              required: true
              selector:
                number:
            label:
              label: Room Label (Optional)
              required: false
              selector:
                text:
            threshold_area:
              label: Threshold Area (Optional)
              required: false
              selector:
                number:
            default_cleaning_mode:
              label: Default Cleaning Mode (Optional)
              required: false
              selector:
                select:
                  options:
                    - sweeping
                    - mopping
                    - sweeping_and_mopping
            occupancy_entity:
              label: "[Occupancy] Entity (Optional)"
              required: false
              selector:
                entity:
                  filter:
                    domain: binary_sensor
                    device_class: occupancy
            occupancy_threshold:
              label: "[Occupancy] Reclean After Minutes (Optional)"
              required: false
              selector:
                number:
            self_clean_afterwards:
              label: "Self Clean After Room"
              required: false
              selector:
                boolean:
    occupancy_sensors:
      name: All Used Occupancy Sensors
      description: >
        Due to technical reasons **all** Occupancy Entities listed in the *Room Settings* have to be specified here to be detected.
      default: []
      selector:
        entity:
          filter:
            domain: binary_sensor
            device_class: occupancy
          multiple: true
    persons:
      name: Persons
      description: >
        Persons, which trigger a cleaning after they have all left.

        *Only works if the Zone is set*
      selector:
        entity:
          filter:
            domain: person
          multiple: true
      default: []
    home_zone:
      name: Zone (Home)
      description: >
        If set it triggers a cleaning after all specified Persons have left.
      selector:
        entity:
          filter:
            domain: zone
          multiple: false
      default: []
    leave_duration:
      name: Zone Leave - Start Cleaning Delay
      description: >
        Delay after which a cleaning is initiated after all specified Persons have left the Zone.
      selector:
        duration:
      default:
        hours: 0
        minutes: 0
        seconds: 0
    enter_duration:
      name: Zone Enter - Stop Cleaning Delay
      description: >
        Delay after which a cleaning is stopped if a Person enters the zone during the cleaning.
      selector:
        duration:
      default:
        hours: 0
        minutes: 0
        seconds: 0
    wash_mop_before:
      name: Wash Mops Before Cleaning
      description: >
        Explicitly start a Self Clean before the Cleaning Task
      selector:
        boolean:
      default: false   
    skip_self_clean_progress_threshold:
      name: Skip Self Clean - Progress Threshold
      description: >
        Skips the Self Cleaning configured for a room, if the cleaning progress is greater or equal the specified threshold.
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
      default: 95
variables:
  vacuum_entity: !input vacuum_entity
  todo_list_entity: !input todo_list_entity
  cleaned_area_entity: !input cleaned_area_entity
  current_room_entity: !input current_room_entity
  persons: !input persons
  home_zone: !input home_zone
  wash_mop_before: !input wash_mop_before
  skip_self_clean_progress_threshold: !input skip_self_clean_progress_threshold
triggers:
  - trigger: time
    at: "00:00:00"
    id: new-day
  - trigger: event
    event_type: start-room-cleaning
    event_data:
      vacuum: !input vacuum_entity
    id: start-room-cleaning
  - trigger: state
    entity_id:
      - !input cleaned_area_entity
    to: null
    id: area-change
  - trigger: state
    entity_id: !input occupancy_sensors
    to: null
    id: occupancy-change
  - trigger: state
    entity_id: !input home_zone
    attribute: persons
    id: persons-change-leave
    for: !input leave_duration
  - trigger: state
    entity_id: !input home_zone
    attribute: persons
    id: persons-change-enter
    for: !input enter_duration
  - trigger: state
    entity_id:
      - !input current_room_entity
    to: null
    id: room-change
conditions: []
actions:
  - action: todo.get_items
    metadata: {}
    target:
      entity_id: "{{ todo_list_entity }}"
    response_variable: items_to_clean
  - if:
      - condition: template
        value_template: "{{ items_to_clean[todo_list_entity]['items'] |count <= 0 }}"
    then:
      - variables:
          map_name: "{{ state_attr(vacuum_entity,'rooms') |first }}"
          vacuum_rooms: "{{ state_attr(vacuum_entity,'rooms')[map_name] }}"
          room_count: "{{ vacuum_rooms |count }}"
      - repeat:
          count: "{{ room_count }}"
          sequence:
            - variables:
                vacuum_room: "{{ vacuum_rooms[repeat.index -1] }}"
                room_definition: "{{\_{\"id\": vacuum_room.id, \"threshold_area\": -1} }}\n"
            - action: todo.add_item
              target:
                entity_id: "{{ todo_list_entity }}"
              data:
                item: "{{ vacuum_room.name }}"
                description: "{{ room_definition |to_json }}"
  - variables:
      room_overrides: !input room_overrides
      vacuum_device_id: "{{ device_attr(vacuum_entity,'id') }}"
      all_room_definitions: >-
        {{ items_to_clean[todo_list_entity]['items']| map(attribute='description') | map('from_json') | list }}
      current_room_id: >-
        {{ state_attr(current_room_entity,'room_id') }}
      cleaning_progress_entity: >-
        {{ device_entities(vacuum_device_id) | select('match','sensor\..*_cleaning_progress') |list |first }}
      cleaning_count_entity: >-
        {{ device_entities(vacuum_device_id) | select('match','sensor\..*_cleaning_count') |list |first }}
      self_clean_entity: >-
        {{ device_entities(vacuum_device_id) | select('match','button\..*_self_clean') |list |first }}
      cleaning_progress: "{{ states(cleaning_progress_entity) }}"
      cleaning_count: "{{ states(cleaning_count_entity) }}"
      clean_cycle: "{{ cleaning_count + 1 }}"
      current_room: "{{ all_room_definitions | selectattr('id','eq',current_room_id) | first }}"
  - repeat:
      count: "{{ all_room_definitions | count }}"
      sequence:
        - variables:
            room_definition: "{{ all_room_definitions[repeat.index - 1] }}"
            room_override: "{{ room_overrides | selectattr('id','eq',room_definition.id) | list}}"
        - if:
            - condition: template
              value_template: "{{ room_override |count > 0 }}"
          then:
            - variables:
                room_definition: >-
                  {{ room_definition | combine(room_override | first) }}                
        - variables:
            room_definition: >-
              {{ room_definition | combine({
                "todo_item": items_to_clean[todo_list_entity]['items'][repeat.index - 1].summary,
                "threshold_area": room_definition.threshold_area | default(-1),
                "is_todo": items_to_clean[todo_list_entity]['items'][repeat.index - 1].status == 'needs_action',
                "cleaned_area": room_definition.cleaned_area | default(0) 
                }) 
              }}
        - data:
            item: "{{ room_definition.todo_item }}"
            description: "{{ room_definition | to_json }}"
          action: todo.update_item
          target:
            entity_id: "{{ todo_list_entity }}"
  - action: todo.get_items
    metadata: {}
    target:
      entity_id: "{{ todo_list_entity }}"
    response_variable: items_to_clean 
  - variables:
      all_room_definitions: >-
              {{ items_to_clean[todo_list_entity]['items']| map(attribute='description') | map('from_json') | list }}
      all_rooms_to_clean: "{{ all_room_definitions | selectattr('is_todo','eq', true) | list}}"
  - choose:
      - conditions:
          - condition: trigger
            id:
              - area-change
        sequence:
          - if:
              - condition: template
                value_template: "{{ (states(cleaned_area_entity) | float(-1)) == 0 }}"
            then:
              - repeat:
                  count: "{{ all_rooms_to_clean | count }}"
                  sequence:
                    - variables:
                        room_definition: >-
                          {{ all_rooms_to_clean[repeat.index - 1] | combine({
                            "cleaned_area": 0,
                            "self_clean_initiated": false,
                            "last_clean_cycle": clean_cycle
                            }) 
                          }}
                    - action: todo.update_item
                      data:
                        item: "{{ room_definition.todo_item}}"
                        description: "{{ room_definition | to_json }}"
                      target:
                        entity_id: "{{ todo_list_entity }}"
            else:
              - if:
                  - condition: template
                    value_template: "{{ states(vacuum_entity) == 'cleaning' }}"
                then:
                  - variables:
                      prev_cleaned_area: "{{ current_room.cleaned_area | default(0) }}"
                  - variables:
                      diff_area: "{{ (trigger.to_state.state | float) - (trigger.from_state.state | float) }}"
                      current_room: >
                        {{ current_room | combine({
                            "cleaned_area": prev_cleaned_area + diff_area,
                            "last_clean": now().isoformat()
                          })
                        }}
                      area_done: "{{ current_room.cleaned_area >= current_room.threshold_area}}"
                      new_item_status: >
                        {% if(area_done) %}
                          completed
                        {% else %}
                          needs_action
                        {% endif %}
                  - if:
                      - condition: template
                        value_template: "{{ area_done }}"
                    then:
                      - variables:
                          current_room: >
                            {{ current_room | combine({
                                "last_complete_clean": current_room.last_clean,
                                "occupancy_minutes": 0
                              })
                            }}
                  - action: todo.update_item
                    data:
                      item: "{{ current_room.todo_item}}"
                      description: "{{ current_room | to_json }}"
                      status: "{{ new_item_status }}"
                    target:
                      entity_id: "{{ todo_list_entity }}"  
      - conditions:
          - condition: trigger
            id:
              - new-day
        sequence:
          - target:
              entity_id: "{{ todo_list_entity }}"
            response_variable: todos
            action: todo.get_items
          - variables:
              items: "{{ todos[todo_list_entity]['items'] }}"
              item_count: "{{ items | list | count }}"
          - repeat:
              count: "{{ item_count }}"
              sequence:
                - target:
                    entity_id: "{{ todo_list_entity }}"
                  data:
                    item: "{{ items[repeat.index - 1].summary }}"
                    status: needs_action
                  action: todo.update_item
      - conditions:
          - condition: trigger
            id:
              - start-room-cleaning
        sequence:
          - variables:
              vacuum_device_id: "{{ device_attr(vacuum_entity,'id') }}"
              clean_genius_entity: >-
                {{ device_entities(vacuum_device_id) |
                select('match','select\..*cleangenius') |list |first }}
              customized_cleaning_entity: >-
                {{ device_entities(vacuum_device_id) |
                select('match','switch\..*customized_cleaning') |list |first }}
              cleaning_times_entities: >-
                {{ device_entities(vacuum_device_id) |
                select('match','select\..*room.*_cleaning_times') |list }}
              cleaning_mode_entities: >-
                {{ device_entities(vacuum_device_id) |
                select('match','select\..*room.*_cleaning_mode') |list }}
              preferred_cleaning_mode: "{{ trigger.event.data.preferred_cleaning_mode |\_default('sweeping_and_mopping') }}"
              rooms: "{{ all_rooms_to_clean }}"
          - action: select.select_option
            metadata: {}
            data:
              option: "off"
            target:
              entity_id: "{{ clean_genius_entity }}"
          - delay:
              hours: 0
              minutes: 0
              seconds: 0
              milliseconds: 500
          - action: switch.turn_on
            metadata: {}
            data: {}
            target:
              entity_id: "{{ customized_cleaning_entity }}"
          - delay:
              hours: 0
              minutes: 0
              seconds: 0
              milliseconds: 500
          - action: select.select_option
            metadata: {}
            data:
              option: 1x
            target:
              entity_id: "{{cleaning_times_entities}}"
          - action: select.select_option
            metadata: {}
            data:
              option: "{{ preferred_cleaning_mode }}"
            target:
              entity_id: "{{ cleaning_mode_entities }}"
          - if:
              - condition: template
                value_template: "{{ (rooms | count) > 0 }}"
            then:
              - if:
                  - condition: template
                    value_template: "{{ wash_mop_before }}"
                then:
                  - action: button.press
                    target:
                      entity_id: "{{ self_clean_entity }}"
                    data: {}
              - action: dreame_vacuum.vacuum_clean_segment
                data:
                  segments: >
                    {{ rooms | map(attribute="id") | list }}
                target:
                  entity_id: "{{ vacuum_entity }}"
      - conditions:
          - condition: trigger
            id:
              - occupancy-change
        sequence:
          - variables:
              room: "{{ all_room_definitions | selectattr('occupancy_entity','defined') | selectattr('occupancy_entity','eq',trigger.entity_id) | first}}"
              above_threshold: false
          - variables:
              room: >
                {{room | combine({ 
                  "occupancy_threshold": (room.occupancy_threshold | default(-1)),
                  "occupancy_minutes": (room.occupancy_minutes | default(0))
                })}}
          - if:
              - condition: template
                value_template: "{{ (trigger.to_state.state == 'off') }}"
            then:
              - variables:
                  occupancy_duration: "{{ ((trigger.to_state.last_changed - trigger.from_state.last_changed).seconds / 60) | round(2) }}"
                  room: >
                    {{room | combine({ 
                      "occupancy_minutes": (room.occupancy_minutes + occupancy_duration) | round(2)
                    })}}
                  above_threshold: "{{ room.occupancy_minutes >= (room.occupancy_threshold | float(0)) }}"
          - if:
              - condition: template
                value_template: "{{ above_threshold }}"
            then:
              - action: todo.update_item
                data:
                  item: "{{ room.todo_item}}"
                  description: "{{ room | to_json }}"
                  status: "needs_action"
                target:
                  entity_id: "{{ todo_list_entity }}"
            else:
              - action: todo.update_item
                data:
                  item: "{{ room.todo_item}}"
                  description: "{{ room | to_json }}"
                target:
                  entity_id: "{{ todo_list_entity }}"            
      - conditions:
          - condition: trigger
            id:
              - persons-change-leave
              - persons-change-enter
        sequence:
            - variables:
                from_person_count: "{{ trigger.from_state.attributes.persons | intersect(persons) | count }}"
                to_person_count: "{{ trigger.to_state.attributes.persons | intersect(persons) | count }}"
            - if:
              - condition: template
                value_template: "{{ trigger.id == 'persons-change-enter' and from_person_count == 0 and to_person_count > 0 and states(vacuum_entity) == 'cleaning' }}"
              then:
                - action: vacuum.return_to_base
                  metadata: {}
                  data: {}
                  target:
                    entity_id: "{{ vacuum_entity }}"
            - if:
              - condition: template
                value_template: "{{ trigger.id == 'persons-change-leave' and from_person_count > 0 and to_person_count == 0 and states(vacuum_entity) != 'cleaning' }}"
              then:
                - event: start-room-cleaning
                  event_data:
                    vacuum: "{{ vacuum_entity }}"
      - conditions:
          - condition: trigger
            id:
              - room-change  
        sequence:
          - variables:
              prev_room_id: "{{ trigger.from_state.attributes.room_id }}"
              prev_room: "{{ all_room_definitions | selectattr('id','eq',prev_room_id) | first }}"
          - if:
              - condition: template
                value_template: "{{ prev_room.last_clean_cycle == clean_cycle and prev_room.cleaned_area >= prev_room.threshold_area and prev_room.self_clean_afterwards and not(prev_room.self_clean_initiated) and cleaning_progress < skip_self_clean_progress_threshold}}"
            then:
              - action: button.press
                target:
                  entity_id: "{{ self_clean_entity }}"
                data: {}
              - variables:
                  prev_room: >
                    {{prev_room | combine({ 
                      "self_clean_initiated": true
                    })}}
              - action: todo.update_item
                data:
                  item: "{{ prev_room.todo_item}}"
                  description: "{{ prev_room | to_json }}"
                target:
                  entity_id: "{{ todo_list_entity }}"     
mode: queued
